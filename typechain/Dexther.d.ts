/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DextherInterface extends ethers.utils.Interface {
  functions: {
    "availableFees(address)": FunctionFragment;
    "cancelOffer(uint256)": FunctionFragment;
    "choicePeriod()": FunctionFragment;
    "createOffer(uint256,address,address[],uint256[],uint256[],address[],address)": FunctionFragment;
    "currentFee()": FunctionFragment;
    "finalize(uint256,bool)": FunctionFragment;
    "forceChoice(uint256,bool)": FunctionFragment;
    "getOffer(uint256)": FunctionFragment;
    "offers(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "swap(uint256,address[],uint256[],uint256[])": FunctionFragment;
    "updateChoicePeriod(uint256)": FunctionFragment;
    "updateFee(uint256)": FunctionFragment;
    "updateOwner(address)": FunctionFragment;
    "withdrawFees(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "availableFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "choicePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createOffer",
    values: [
      BigNumberish,
      string,
      string[],
      BigNumberish[],
      BigNumberish[],
      string[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "forceChoice",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BigNumberish, string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChoicePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "updateOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "availableFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "choicePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currentFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceChoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateChoicePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {
    "Canceled(uint256)": EventFragment;
    "Created(address,uint256,uint256,address,address[],uint256[],uint256[],address[],address)": EventFragment;
    "Swapped(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Canceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Created"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swapped"): EventFragment;
}

export class Dexther extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DextherInterface;

  functions: {
    availableFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "availableFees(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cancelOffer(
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelOffer(uint256)"(
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    choicePeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "choicePeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    createOffer(
      estimateAmount: BigNumberish,
      estimateTokenAddress: string,
      offerTokensAddresses: string[],
      offerTokensIds: BigNumberish[],
      offerTokensValues: BigNumberish[],
      expectedTokens: string[],
      restrictedTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createOffer(uint256,address,address[],uint256[],uint256[],address[],address)"(
      estimateAmount: BigNumberish,
      estimateTokenAddress: string,
      offerTokensAddresses: string[],
      offerTokensIds: BigNumberish[],
      offerTokensValues: BigNumberish[],
      expectedTokens: string[],
      restrictedTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currentFee(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "currentFee()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    finalize(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalize(uint256,bool)"(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forceChoice(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forceChoice(uint256,bool)"(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        creator: string;
        estimateAmount: BigNumber;
        estimateTokenAddress: string;
        offerTokensAddresses: string[];
        offerTokensIds: BigNumber[];
        offerTokensValues: BigNumber[];
        expectedTokens: string[];
        restrictedTo: string;
        swapper: string;
        swappedAt: BigNumber;
        swapTokensAddresses: string[];
        swapTokensIds: BigNumber[];
        swapTokensValues: BigNumber[];
        status: number;
        0: string;
        1: BigNumber;
        2: string;
        3: string[];
        4: BigNumber[];
        5: BigNumber[];
        6: string[];
        7: string;
        8: string;
        9: BigNumber;
        10: string[];
        11: BigNumber[];
        12: BigNumber[];
        13: number;
      };
    }>;

    "getOffer(uint256)"(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        creator: string;
        estimateAmount: BigNumber;
        estimateTokenAddress: string;
        offerTokensAddresses: string[];
        offerTokensIds: BigNumber[];
        offerTokensValues: BigNumber[];
        expectedTokens: string[];
        restrictedTo: string;
        swapper: string;
        swappedAt: BigNumber;
        swapTokensAddresses: string[];
        swapTokensIds: BigNumber[];
        swapTokensValues: BigNumber[];
        status: number;
        0: string;
        1: BigNumber;
        2: string;
        3: string[];
        4: BigNumber[];
        5: BigNumber[];
        6: string[];
        7: string;
        8: string;
        9: BigNumber;
        10: string[];
        11: BigNumber[];
        12: BigNumber[];
        13: number;
      };
    }>;

    offers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      estimateAmount: BigNumber;
      estimateTokenAddress: string;
      restrictedTo: string;
      swapper: string;
      swappedAt: BigNumber;
      status: number;
      0: string;
      1: BigNumber;
      2: string;
      3: string;
      4: string;
      5: BigNumber;
      6: number;
    }>;

    "offers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      estimateAmount: BigNumber;
      estimateTokenAddress: string;
      restrictedTo: string;
      swapper: string;
      swappedAt: BigNumber;
      status: number;
      0: string;
      1: BigNumber;
      2: string;
      3: string;
      4: string;
      5: BigNumber;
      6: number;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    swap(
      offerId: BigNumberish,
      swapTokensAddresses: string[],
      swapTokensIds: BigNumberish[],
      swapTokensValues: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swap(uint256,address[],uint256[],uint256[])"(
      offerId: BigNumberish,
      swapTokensAddresses: string[],
      swapTokensIds: BigNumberish[],
      swapTokensValues: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateChoicePeriod(
      newChoicePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateChoicePeriod(uint256)"(
      newChoicePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateFee(
      newCurrentFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateFee(uint256)"(
      newCurrentFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawFees(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawFees(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  availableFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "availableFees(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelOffer(
    offerId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelOffer(uint256)"(
    offerId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  choicePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "choicePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  createOffer(
    estimateAmount: BigNumberish,
    estimateTokenAddress: string,
    offerTokensAddresses: string[],
    offerTokensIds: BigNumberish[],
    offerTokensValues: BigNumberish[],
    expectedTokens: string[],
    restrictedTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createOffer(uint256,address,address[],uint256[],uint256[],address[],address)"(
    estimateAmount: BigNumberish,
    estimateTokenAddress: string,
    offerTokensAddresses: string[],
    offerTokensIds: BigNumberish[],
    offerTokensValues: BigNumberish[],
    expectedTokens: string[],
    restrictedTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currentFee(overrides?: CallOverrides): Promise<BigNumber>;

  "currentFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  finalize(
    offerId: BigNumberish,
    claimingAssets: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalize(uint256,bool)"(
    offerId: BigNumberish,
    claimingAssets: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forceChoice(
    offerId: BigNumberish,
    claimingAssets: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forceChoice(uint256,bool)"(
    offerId: BigNumberish,
    claimingAssets: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getOffer(
    offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    creator: string;
    estimateAmount: BigNumber;
    estimateTokenAddress: string;
    offerTokensAddresses: string[];
    offerTokensIds: BigNumber[];
    offerTokensValues: BigNumber[];
    expectedTokens: string[];
    restrictedTo: string;
    swapper: string;
    swappedAt: BigNumber;
    swapTokensAddresses: string[];
    swapTokensIds: BigNumber[];
    swapTokensValues: BigNumber[];
    status: number;
    0: string;
    1: BigNumber;
    2: string;
    3: string[];
    4: BigNumber[];
    5: BigNumber[];
    6: string[];
    7: string;
    8: string;
    9: BigNumber;
    10: string[];
    11: BigNumber[];
    12: BigNumber[];
    13: number;
  }>;

  "getOffer(uint256)"(
    offerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    creator: string;
    estimateAmount: BigNumber;
    estimateTokenAddress: string;
    offerTokensAddresses: string[];
    offerTokensIds: BigNumber[];
    offerTokensValues: BigNumber[];
    expectedTokens: string[];
    restrictedTo: string;
    swapper: string;
    swappedAt: BigNumber;
    swapTokensAddresses: string[];
    swapTokensIds: BigNumber[];
    swapTokensValues: BigNumber[];
    status: number;
    0: string;
    1: BigNumber;
    2: string;
    3: string[];
    4: BigNumber[];
    5: BigNumber[];
    6: string[];
    7: string;
    8: string;
    9: BigNumber;
    10: string[];
    11: BigNumber[];
    12: BigNumber[];
    13: number;
  }>;

  offers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    creator: string;
    estimateAmount: BigNumber;
    estimateTokenAddress: string;
    restrictedTo: string;
    swapper: string;
    swappedAt: BigNumber;
    status: number;
    0: string;
    1: BigNumber;
    2: string;
    3: string;
    4: string;
    5: BigNumber;
    6: number;
  }>;

  "offers(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    creator: string;
    estimateAmount: BigNumber;
    estimateTokenAddress: string;
    restrictedTo: string;
    swapper: string;
    swappedAt: BigNumber;
    status: number;
    0: string;
    1: BigNumber;
    2: string;
    3: string;
    4: string;
    5: BigNumber;
    6: number;
  }>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  swap(
    offerId: BigNumberish,
    swapTokensAddresses: string[],
    swapTokensIds: BigNumberish[],
    swapTokensValues: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swap(uint256,address[],uint256[],uint256[])"(
    offerId: BigNumberish,
    swapTokensAddresses: string[],
    swapTokensIds: BigNumberish[],
    swapTokensValues: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateChoicePeriod(
    newChoicePeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateChoicePeriod(uint256)"(
    newChoicePeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateFee(
    newCurrentFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateFee(uint256)"(
    newCurrentFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawFees(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawFees(address,uint256)"(
    tokenAddress: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    availableFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "availableFees(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOffer(uint256)"(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    choicePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "choicePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    createOffer(
      estimateAmount: BigNumberish,
      estimateTokenAddress: string,
      offerTokensAddresses: string[],
      offerTokensIds: BigNumberish[],
      offerTokensValues: BigNumberish[],
      expectedTokens: string[],
      restrictedTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createOffer(uint256,address,address[],uint256[],uint256[],address[],address)"(
      estimateAmount: BigNumberish,
      estimateTokenAddress: string,
      offerTokensAddresses: string[],
      offerTokensIds: BigNumberish[],
      offerTokensValues: BigNumberish[],
      expectedTokens: string[],
      restrictedTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    currentFee(overrides?: CallOverrides): Promise<BigNumber>;

    "currentFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "finalize(uint256,bool)"(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    forceChoice(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "forceChoice(uint256,bool)"(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      estimateAmount: BigNumber;
      estimateTokenAddress: string;
      offerTokensAddresses: string[];
      offerTokensIds: BigNumber[];
      offerTokensValues: BigNumber[];
      expectedTokens: string[];
      restrictedTo: string;
      swapper: string;
      swappedAt: BigNumber;
      swapTokensAddresses: string[];
      swapTokensIds: BigNumber[];
      swapTokensValues: BigNumber[];
      status: number;
      0: string;
      1: BigNumber;
      2: string;
      3: string[];
      4: BigNumber[];
      5: BigNumber[];
      6: string[];
      7: string;
      8: string;
      9: BigNumber;
      10: string[];
      11: BigNumber[];
      12: BigNumber[];
      13: number;
    }>;

    "getOffer(uint256)"(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      estimateAmount: BigNumber;
      estimateTokenAddress: string;
      offerTokensAddresses: string[];
      offerTokensIds: BigNumber[];
      offerTokensValues: BigNumber[];
      expectedTokens: string[];
      restrictedTo: string;
      swapper: string;
      swappedAt: BigNumber;
      swapTokensAddresses: string[];
      swapTokensIds: BigNumber[];
      swapTokensValues: BigNumber[];
      status: number;
      0: string;
      1: BigNumber;
      2: string;
      3: string[];
      4: BigNumber[];
      5: BigNumber[];
      6: string[];
      7: string;
      8: string;
      9: BigNumber;
      10: string[];
      11: BigNumber[];
      12: BigNumber[];
      13: number;
    }>;

    offers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      estimateAmount: BigNumber;
      estimateTokenAddress: string;
      restrictedTo: string;
      swapper: string;
      swappedAt: BigNumber;
      status: number;
      0: string;
      1: BigNumber;
      2: string;
      3: string;
      4: string;
      5: BigNumber;
      6: number;
    }>;

    "offers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      estimateAmount: BigNumber;
      estimateTokenAddress: string;
      restrictedTo: string;
      swapper: string;
      swappedAt: BigNumber;
      status: number;
      0: string;
      1: BigNumber;
      2: string;
      3: string;
      4: string;
      5: BigNumber;
      6: number;
    }>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    swap(
      offerId: BigNumberish,
      swapTokensAddresses: string[],
      swapTokensIds: BigNumberish[],
      swapTokensValues: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "swap(uint256,address[],uint256[],uint256[])"(
      offerId: BigNumberish,
      swapTokensAddresses: string[],
      swapTokensIds: BigNumberish[],
      swapTokensValues: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateChoicePeriod(
      newChoicePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateChoicePeriod(uint256)"(
      newChoicePeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFee(
      newCurrentFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateFee(uint256)"(
      newCurrentFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "updateOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFees(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFees(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Canceled(offerId: BigNumberish | null): EventFilter;

    Created(
      creator: string | null,
      offerId: BigNumberish | null,
      estimateAmount: null,
      estimateTokenAddress: string | null,
      offerTokensAddresses: null,
      offersTokensIds: null,
      offerTokensValues: null,
      expectedTokens: null,
      restrictedTo: null
    ): EventFilter;

    Swapped(swapper: string | null, offerId: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    availableFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "availableFees(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOffer(
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelOffer(uint256)"(
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    choicePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "choicePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    createOffer(
      estimateAmount: BigNumberish,
      estimateTokenAddress: string,
      offerTokensAddresses: string[],
      offerTokensIds: BigNumberish[],
      offerTokensValues: BigNumberish[],
      expectedTokens: string[],
      restrictedTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createOffer(uint256,address,address[],uint256[],uint256[],address[],address)"(
      estimateAmount: BigNumberish,
      estimateTokenAddress: string,
      offerTokensAddresses: string[],
      offerTokensIds: BigNumberish[],
      offerTokensValues: BigNumberish[],
      expectedTokens: string[],
      restrictedTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    currentFee(overrides?: CallOverrides): Promise<BigNumber>;

    "currentFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalize(uint256,bool)"(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forceChoice(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "forceChoice(uint256,bool)"(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOffer(uint256)"(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "offers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      offerId: BigNumberish,
      swapTokensAddresses: string[],
      swapTokensIds: BigNumberish[],
      swapTokensValues: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swap(uint256,address[],uint256[],uint256[])"(
      offerId: BigNumberish,
      swapTokensAddresses: string[],
      swapTokensIds: BigNumberish[],
      swapTokensValues: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateChoicePeriod(
      newChoicePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateChoicePeriod(uint256)"(
      newChoicePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateFee(
      newCurrentFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateFee(uint256)"(
      newCurrentFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "updateOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawFees(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawFees(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    availableFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "availableFees(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelOffer(uint256)"(
      offerId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    choicePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "choicePeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createOffer(
      estimateAmount: BigNumberish,
      estimateTokenAddress: string,
      offerTokensAddresses: string[],
      offerTokensIds: BigNumberish[],
      offerTokensValues: BigNumberish[],
      expectedTokens: string[],
      restrictedTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createOffer(uint256,address,address[],uint256[],uint256[],address[],address)"(
      estimateAmount: BigNumberish,
      estimateTokenAddress: string,
      offerTokensAddresses: string[],
      offerTokensIds: BigNumberish[],
      offerTokensValues: BigNumberish[],
      expectedTokens: string[],
      restrictedTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currentFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalize(uint256,bool)"(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forceChoice(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forceChoice(uint256,bool)"(
      offerId: BigNumberish,
      claimingAssets: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getOffer(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOffer(uint256)"(
      offerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "offers(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      offerId: BigNumberish,
      swapTokensAddresses: string[],
      swapTokensIds: BigNumberish[],
      swapTokensValues: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swap(uint256,address[],uint256[],uint256[])"(
      offerId: BigNumberish,
      swapTokensAddresses: string[],
      swapTokensIds: BigNumberish[],
      swapTokensValues: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateChoicePeriod(
      newChoicePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateChoicePeriod(uint256)"(
      newChoicePeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateFee(
      newCurrentFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateFee(uint256)"(
      newCurrentFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawFees(address,uint256)"(
      tokenAddress: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
